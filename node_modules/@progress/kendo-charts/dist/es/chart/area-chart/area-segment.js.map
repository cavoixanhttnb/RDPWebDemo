{"version":3,"file":"area-segment.js","sources":["area-segment.js"],"sourcesContent":["import { drawing as draw, geometry as geom } from '@progress/kendo-drawing';\nimport LineSegment from '../line-chart/line-segment';\n\nimport { append, deepExtend, isFunction, last } from '../../common';\n\nclass AreaSegment extends LineSegment {\n    constructor(linePoints, currentSeries, seriesIx, prevSegment, stackPoints) {\n        super(linePoints, currentSeries, seriesIx);\n\n        this.prevSegment = prevSegment;\n        this.stackPoints = stackPoints;\n    }\n\n    createVisual() {\n        const series = this.series;\n        const defaults = series._defaults;\n        const lineOptions = series.line || {};\n        let color = series.color;\n\n        if (isFunction(color) && defaults) {\n            color = defaults.color;\n        }\n\n        this.visual = new draw.Group({\n            zIndex: series.zIndex\n        });\n\n        this.createFill({\n            fill: {\n                color: color,\n                opacity: series.opacity\n            },\n            stroke: null\n        });\n\n        if (lineOptions.width > 0 && lineOptions.visible !== false) {\n            this.createStroke({\n                stroke: deepExtend({\n                    color: color,\n                    opacity: series.opacity,\n                    lineCap: \"butt\"\n                }, lineOptions)\n            });\n        }\n    }\n\n    strokeSegments() {\n        let segments = this._strokeSegments;\n\n        if (!segments) {\n            segments = this._strokeSegments = this.createStrokeSegments();\n        }\n\n        return segments;\n    }\n\n    createStrokeSegments() {\n        return this.segmentsFromPoints(this.points());\n    }\n\n    stackSegments() {\n        if (this.prevSegment) {\n            return this.prevSegment.createStackSegments(this.stackPoints);\n        }\n\n        return this.createStackSegments(this.stackPoints);\n    }\n\n    createStackSegments(stackPoints) {\n        return this.segmentsFromPoints(this.toGeometryPoints(stackPoints)).reverse();\n    }\n\n    segmentsFromPoints(points) {\n        return points.map((point) => new geom.Segment(point));\n    }\n\n    createStroke(style) {\n        const stroke = new draw.Path(style);\n        stroke.segments.push.apply(stroke.segments, this.strokeSegments());\n\n        this.visual.append(stroke);\n    }\n\n    hasStackSegment() {\n        return this.prevSegment || (this.stackPoints && this.stackPoints.length);\n    }\n\n    createFill(style) {\n        const strokeSegments = this.strokeSegments();\n        const fillSegments = strokeSegments.slice(0);\n        const hasStackSegments = this.hasStackSegment();\n\n        if (hasStackSegments) {\n            const stackSegments = this.stackSegments();\n\n            append(fillSegments, stackSegments);\n        }\n\n        const fill = new draw.Path(style);\n        fill.segments.push.apply(fill.segments, fillSegments);\n\n        if (!hasStackSegments && strokeSegments.length > 1) {\n            this.fillToAxes(fill);\n        }\n\n        this.visual.append(fill);\n    }\n\n    fillToAxes(fillPath) {\n        const chart = this.parent;\n        const invertAxes = chart.options.invertAxes;\n        const valueAxis = chart.seriesValueAxis(this.series);\n        const crossingValue = chart.categoryAxisCrossingValue(valueAxis);\n        const endSlot = valueAxis.getSlot(crossingValue, crossingValue, true);\n        const segments = this.strokeSegments();\n        const firstPoint = segments[0].anchor();\n        const lastPoint = last(segments).anchor();\n        let end = invertAxes ? endSlot.x1 : endSlot.y1;\n\n        if (invertAxes) {\n            fillPath.lineTo(end, lastPoint.y)\n                    .lineTo(end, firstPoint.y);\n        } else {\n            fillPath.lineTo(lastPoint.x, end)\n                    .lineTo(firstPoint.x, end);\n        }\n    }\n}\n\nexport default AreaSegment;"],"names":["super","const","let"],"mappings":"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"}