{"version":3,"file":"gauge.js","sources":["gauge.js"],"sourcesContent":["import { geometry as geo, drawing } from '@progress/kendo-drawing';\nimport { Class, elementSize, setDefaultOptions, deepExtend, isArray, isNumber } from '../common';\nimport { DEFAULT_WIDTH, DEFAULT_HEIGHT } from './constants';\nimport { ChartService } from '../services';\nimport { unpad } from './utils';\n\nconst DEFAULT_MARGIN = 5;\nconst { Path, Surface } = drawing;\n\nclass Gauge extends Class {\n\n    constructor(element, userOptions, theme, context = {}) {\n        super();\n\n        this.element = element;\n        this.theme = theme;\n        this.contextService = new ChartService(this, context);\n        this._originalOptions = deepExtend({}, this.options, userOptions);\n        this.options = deepExtend({}, this._originalOptions);\n        this._initTheme(theme);\n\n        this.redraw();\n    }\n\n    destroy() {\n        this.surface.destroy();\n\n        delete this.element;\n        delete this.surfaceElement;\n    }\n\n    value(value) {\n        const pointer = this.pointers[0];\n\n        if (arguments.length === 0) {\n            return pointer.value();\n        }\n\n        pointer.value(value);\n        this._setValueOptions(value);\n    }\n\n    _draw() {\n        const surface = this.surface;\n\n        surface.clear();\n        surface.draw(this._visuals);\n    }\n\n    exportVisual() {\n        return this._visuals;\n    }\n\n    allValues(values) {\n        const pointers = this.pointers;\n        const allValues = [];\n\n        if (arguments.length === 0) {\n            for (let i = 0; i < pointers.length; i++) {\n                allValues.push(pointers[i].value());\n            }\n\n            return allValues;\n        }\n\n        if (isArray(values)) {\n            for (let i = 0; i < values.length; i++) {\n                if (isNumber(values[i])) {\n                    pointers[i].value(values[i]);\n                }\n            }\n        }\n\n        this._setValueOptions(values);\n    }\n\n    _setValueOptions(values) {\n        const pointers = [].concat(this.options.pointer);\n        const arrayValues = [].concat(values);\n\n        for (let i = 0; i < arrayValues.length; i++) {\n            pointers[i].value = arrayValues[i];\n        }\n    }\n\n    resize() {\n        const transitions = this.options.transitions;\n\n        this._toggleTransitions(false);\n\n        this.redraw();\n\n        this._toggleTransitions(transitions);\n    }\n\n    redraw() {\n        const size = this._surfaceSize();\n        const wrapper = new geo.Rect([ 0, 0 ], [ size.width, size.height ]);\n\n        this._initSurface();\n\n        this.gaugeArea = this._createGaugeArea();\n\n        this._createModel();\n\n        const bbox = unpad(wrapper.bbox(), this._gaugeAreaMargin);\n        this.reflow(bbox);\n    }\n\n    setOptions(options, theme) {\n        this._originalOptions = deepExtend(this._originalOptions, options);\n        this.options = deepExtend({}, this._originalOptions);\n\n        this._initTheme(theme);\n\n        this.redraw();\n    }\n\n    _initTheme(theme) {\n        let currentTheme = theme || this.theme || {};\n        this.theme = currentTheme;\n\n        this.options = deepExtend({}, currentTheme, this.options);\n        const options = this.options;\n        const pointer = options.pointer;\n\n        if (isArray(pointer)) {\n            const pointers = [];\n            for (let i = 0; i < pointer.length; i++) {\n                pointers.push(deepExtend({}, currentTheme.pointer, pointer[i]));\n            }\n            options.pointer = pointers;\n        }\n    }\n\n    _createGaugeArea() {\n        const options = this.options.gaugeArea;\n        const size = this.surface.size();\n        const border = options.border || {};\n        let areaGeometry = new geo.Rect([ 0, 0 ], [ size.width, size.height ]);\n\n        this._gaugeAreaMargin = options.margin || DEFAULT_MARGIN;\n\n        if (border.width > 0) {\n            areaGeometry = unpad(areaGeometry, border.width);\n        }\n\n        const gaugeArea = Path.fromRect(areaGeometry, {\n            stroke: {\n                color: border.width ? border.color : \"\",\n                width: border.width,\n                dashType: border.dashType,\n                lineJoin: \"round\",\n                lineCap: \"round\"\n            },\n            fill: {\n                color: options.background\n            }\n        });\n\n        return gaugeArea;\n    }\n\n    _initSurface() {\n        const { options, surface } = this;\n        const element = this._surfaceElement();\n        const size = this._surfaceSize();\n\n        elementSize(element, size);\n\n        if (!surface || surface.options.type !== options.renderAs) {\n            if (surface) {\n                surface.destroy();\n            }\n\n            this.surface = Surface.create(element, {\n                type: options.renderAs\n            });\n        } else {\n            this.surface.clear();\n            this.surface.resize();\n        }\n    }\n\n    _surfaceSize() {\n        const options = this.options;\n        const size = this._getSize();\n\n        if (options.gaugeArea) {\n            deepExtend(size, options.gaugeArea);\n        }\n\n        return size;\n    }\n\n    _surfaceElement() {\n        if (!this.surfaceElement) {\n            this.surfaceElement = document.createElement('div');\n            this.element.appendChild(this.surfaceElement);\n        }\n\n        return this.surfaceElement;\n    }\n\n    getSize() {\n        return this._getSize();\n    }\n\n    _getSize() {\n        const element = this.element;\n        const defaultSize = this._defaultSize();\n        let width = element.offsetWidth;\n        let height = element.offsetHeight;\n\n        if (!width) {\n            width = defaultSize.width;\n        }\n\n        if (!height) {\n            height = defaultSize.height;\n        }\n\n        return { width: width, height: height };\n    }\n\n    _defaultSize() {\n        return {\n            width: DEFAULT_WIDTH,\n            height: DEFAULT_HEIGHT\n        };\n    }\n\n    _toggleTransitions(value) {\n        this.options.transitions = value;\n        for (let i = 0; i < this.pointers.length; i++) {\n            this.pointers[i].options.animation.transitions = value;\n        }\n    }\n}\n\nsetDefaultOptions(Gauge, {\n    plotArea: {},\n    theme: \"default\",\n    renderAs: \"\",\n    pointer: {},\n    scale: {},\n    gaugeArea: {}\n});\n\nexport default Gauge;"],"names":["const","super","i","let","this"],"mappings":"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"}